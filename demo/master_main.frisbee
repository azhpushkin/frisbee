from sockets import TCPServer;
from zero_sum import FindZero;
from node import Node;


active Client {
   val sock;
   val nodes;

   def val result(val items, val part) {
        this.sock ! send(items.to_string());
        this ! start();
   }

   def Void start() {
      val x <= this.sock ! get();

      [String] strings = x.split(" ");
      [Int] array = [];
      Int i = 0;
      while (i < strings.length()) {
        array = array + [strings[i].to_int()];
        i = i + 1;
      }
      io  ! print(array.to_string());
      this.nodes[0] ! find_zero(array, this);
   }
}


active Main {
   val nodes;

   def Void connect(val conn) {
       io ! print("New connection: ", conn);
       Client x = spawn Client(conn, this.nodes);

       x ! start();
   }

   def Void run() {
     Node initial = spawn Node();
     val ack <= initial ! init();
     this.nodes = [initial, ];

     val server = spawn TCPServer(9967, this);
     server ! start();
   }

   def Void add_node(val node) {
      this.nodes = this.nodes + [node];
      Int i = 0;
      while (i < this.nodes.length()) {
         this.nodes[i] ! update_nodes(this.nodes);
         i = i + 1;
      }

      io ! print("New node added!");
   }
}