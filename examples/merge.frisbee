active MergeSort {
    val items;
    val return_to;
    val part;
    val left_res;
    val right_res;


    def Void merge(val left, val right) {

        val result = [];
        val left_i = 0;
        val right_i = 0;

        while (left_i < left.length() and right_i < right.length()) {
           if (left[left_i] < right[right_i]) {
               result = result + [left[left_i]];
               left_i = left_i + 1;
           }
           else {
               result = result + [right[right_i]];
               right_i = right_i + 1;
           }

        }

        while (left_i < left.length()) {
            result = result + [left[left_i]];
            left_i = left_i + 1;
        }
        while (right_i < right.length()) {
            result = result + [right[right_i]];
            right_i = right_i + 1;
        }

         return result;
    }


    def val merge_sort() {
        if (this.items.length() < 2) {
            this.return_to ! get_res(this.items, this.part);
            return void;
        }

        val left = [];
        val right = [];
        val middle = this.items.length() / 2;

        val i = 0;
        while (i < this.items.length()) {
           if (i < middle)
               left = left + [this.items[i]];
           else
               right = right + [this.items[i]];

           i = i + 1;
        }

        val left_sort = spawn MergeSort(left, this, "left", void, void);
        val right_sort = spawn MergeSort(right, this, "right", void, void);

        left_sort ! merge_sort();
        right_sort ! merge_sort();
    }

    def val get_res(val items, val part) {
        if (part == "left") this.left_res = items;
        else this.right_res = items;

        if (this.left_res == void or this.right_res == void)
           return void;

        val x = this.merge(this.left_res, this.right_res);
        this.return_to ! get_res(x, this.part);
    }
}
